---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-agent-conf
  labels:
    app: opentelemetry
    component: otel-agent-conf
data:
  otel-agent-config: |
    receivers:
        opencensus:
        # prometheus:
        #     config:
        #         scrape_configs:
        #         - job_name: 'kubernetes-pods'
        #           scrape_interval: 10s
        #           kubernetes_sd_configs:
        #           - role: pod
        #             # select only pods on the same host as the agent to prevent
        #             # duplication of metrics
        #             selectors:
        #               - role: pod
        #                 field: "spec.nodeName=${NODE_NAME}"
        #           relabel_configs:
        #             - source_labels: [__meta_kubernetes_pod_container_port_name]
        #               action: keep
        #               regex: (.*-metrics)
        #             - source_labels: [__meta_kubernetes_namespace]
        #               action: replace
        #               target_label: kubernetes_namespace
        #             - source_labels: [__meta_kubernetes_pod_name]
        #               action: replace
        #               target_label: kubernetes_pod_name
        #             - source_labels: [__meta_kubernetes_pod_container_name]
        #               action: replace
        #               target_label: kubernetes_container_name
        #             - source_labels: [__meta_kubernetes_pod_host_ip]
        #               action: replace
        #               target_label: kubernetes_pod_host_ip
        #             - source_labels: [__meta_kubernetes_pod_label_name]
        #               action: replace
        #               target_label: app
        #
        #             # Converts all pod labels to metric labels.
        #             # Warning: can increase number of labels significantly !
        #             # - action: labelmap
        #             #   regex: __meta_kubernetes_pod_label_(.+)
    exporters:
        logging:
            loglevel: info
        stackdriver:
        datadog:
          api:
            key: ${DATADOG_API_KEY}
          metrics:
            report_buckets: true
    processors:
        batch:
        queued_retry:
        memory_limiter:
          ballast_size_mib: 165 # Same as --mem-ballast-size-mib CLI argument
          limit_mib: 400        # 80% of maximum memory up to 2G
          spike_limit_mib: 20   # 25% of limit up to 2G
          check_interval: 5s
        filter:
          metrics:
            include:
              match_type: regexp
              metric_names:
                - otelcol_.*            # allow metrics from the OpenTelemetry collector
                - flask_app.*           # allow metrics from Flask app
                - custom_metric_example # allow metric from custom-metrics-example
    extensions:
        health_check:
    service:
        extensions: [health_check]
        pipelines:
            traces:
                receivers: [opencensus]
                processors: [memory_limiter, batch, queued_retry]
                exporters: [stackdriver, logging]
            metrics:
                receivers: [opencensus]
                processors: [memory_limiter, filter]
                exporters: [stackdriver, datadog, logging]

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: otel-agent
  labels:
    app: opentelemetry
    component: otel-agent
spec:
  selector:
    matchLabels:
      app: opentelemetry
      component: otel-agent
  template:
    metadata:
      labels:
        app: opentelemetry
        component: otel-agent
    spec:
      serviceAccount: prometheus
      containers:
      - command:
          - "/otelcontribcol"
          - "--config=/conf/otel-agent-config.yaml"
          # Memory Ballast size should be max 1/3 to 1/2 of memory.
          - "--mem-ballast-size-mib=165"
        image: otel/opentelemetry-collector-contrib-dev:latest
        name: otel-agent
        env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: DATADOG_API_KEY
            valueFrom:
              secretKeyRef:
                name: datadog
                key: api_key
        resources:
          limits:
            cpu: 500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 55680 # Default OpenTelemetry receiver port.
        - containerPort: 8888  # Agent metrics.
          name: otel-metrics
        - containerPort: 55678 # OpenCensus receiver port.
          hostPort: 55678      # OpenCensus agent host receiving port = all apps can send metrics to <HOST_IP>:55678.
          protocol: TCP
        volumeMounts:
        - name: otel-agent-config-vol
          mountPath: /conf
        livenessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
        readinessProbe:
          httpGet:
            path: /
            port: 13133 # Health Check extension default port.
      volumes:
        - configMap:
            name: otel-agent-conf
            items:
              - key: otel-agent-config
                path: otel-agent-config.yaml
          name: otel-agent-config-vol
